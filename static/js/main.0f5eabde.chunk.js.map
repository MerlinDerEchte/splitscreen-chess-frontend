{"version":3,"sources":["Model/GameLogic/Colors.js","Components/SplitscreenGame/Settings/Settings.js","Model/GameLogic/Types.js","Components/Shared/constants/Colors.js","Components/Shared/constants/Types.js","Components/Shared/getPieceImage.js","Components/Shared/Game/Board/Field/Field.js","Components/Shared/Game/Board/PawnDevelopment/PawnDevelopment.js","Model/GameLogic/PieceFilterCondition.js","Model/GameLogic/PieceFilterConditionTypes.js","Model/GameLogic/PieceFilter.js","Model/GameLogic/Move.js","Model/GameLogic/getPawnMoves.js","Model/GameLogic/getKnightMoves.js","Model/GameLogic/getKingMoves.js","Model/GameLogic/getRookMoves.js","Model/GameLogic/getBishopMoves.js","Model/GameLogic/getQueenMoves.js","Model/GameLogic/getPieceMoves.js","Model/GameLogic/getMoves.js","Model/GameLogic/isKingAttacked.js","Components/Shared/Game/GameOver/GameOver.js","Model/GameLogic/getBoardAfterMove.js","Model/GameLogic/isValidMove.js","Components/Shared/Game/Board/BoardComponent.js","Components/Shared/Game/Graveyard/Graveyard.js","Model/GameLogic/getValidMoves.js","Model/GameLogic/isGameOver.js","Model/GameLogic/makeMove.js","Components/Shared/Game/StatusDisplay/StatusDisplay.js","Model/GameLogic/Game.js","Model/GameLogic/Board.js","Model/GameLogic/Piece.js","Model/GameLogic/newGameFactory.js","Model/GameLogic/undoMove.js","Components/SplitscreenGame/SplitscreenGame.js","Components/Shared/Game/UndoMoveComponent/UndoMoveComponent.js","Model/GameLogic/pieceFactory.js","Model/GameLogic/boardFactory.js","Components/OnlineGame/ReadyToShareComponent/ReadyToShareComponent.js","backendEndpoint.js","Components/OnlineGame/OtherPlayerLeftComponent/OtherPlayerLeftComponent.js","Components/OnlineGame/OnlineGame.js","URL.js","Components/Shared/NavigationMenu/NavigationMenu.js","Components/Shared/NavigationButton/NavigationButton.js","Components/Home/HomeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Colors","Object","freeze","BLACK","WHITE","Settings","props","id","onClick","e","Board","turn","preventDefault","setShowSettingsOverlay","stopPropagation","firstBoard","className","screenWidth","toggleFirstBoard","initGame","Types","BISHOP","KING","KNIGHT","PAWN","QUEEN","ROOK","getPieceImage","type","color","imgSrc","process","getImageSrc","alt","src","draggable","Field","piece","getPieceByPosition","fieldNumber","pieceImage","isKingInDanger","Math","floor","selectedField","playerColor","rotateColor","selectedFieldPossibleTargets","includes","PawnDevelopment","bishopIMG","knightIMG","queenIMG","rookIMG","PieceFilterCondition","property","value","pieceFilterConditionType","this","PieceFilterConditionTypes","EQUAL","UNEQUAL","PieceFilter","conditions","pieces","filter","cond","Move","targetPosition","removePiece","otherMovedPiece","otherTargetPosition","copy","getPawnMoves","board","getPosition","pawnCol","possibleMovesPawn","push","hasMoved","leftTacklePiece","rightTacklePiece","lastMovedPiece","lastPosition","getKnightMoves","possibleMovesKnight","kinghtRow","knightCol","forEach","pos","nextPosition","pieceOnTarget","getKingMoves","checkForKingSafety","possibleMovesKing","kingRow","kingCol","getRookMoves","possibleMovesRook","rookRow","position","rookCol","continueCountingRook","i","nextCol","removedPiece","nextRow","getBishopMoves","possibleMovesBishop","bishopRow","bishopCol","continueCountingBishop","getQueenMoves","getPieceMoves","getMoves","allMoves","p_FilterCondition_Color","activePieces","isKingAttacked","newBoard","switchTurn","king","getKing","GameOver","getBoardAfterMove","move","exchangedPieces","movedPiece","copyWithExchangedPieces","newRemovedPiece","graveyardPieces","round","isValidMove","enemyMoves","BoardComponent","useState","setSelectedField","setSelectedFieldPossibleTargets","fields","Array","fill","kingAttacked","kingPosition","selectPawnDevelopment","Promise","resolve","reject","document","getElementById","addEventListener","moveToSelectedField","nextMove","a","getElementsByClassName","style","display","unselectField","pointerDownField","pointerType","console","log","cancelBubble","newSelectedFieldPossiblePositions","selectedPosition","getMousePositionField","pieceOnClickedField","pieceMoves","map","m","boardContainer","movePieceImage","pointerUpField","pieceOnSelectedField","possibleMoves","find","pieceIMG","boardOffset","getBoundingClientRect","pieceWidth","clientWidth","xOnViewport","clientX","changedTouches","yOnViewport","clientY","mouseX","left","right","mouseY","top","bottom","zIndex","height","width","leftBorder","topBorder","rightBorder","bottomBorder","boardContainerWidth","boardContainerHeight","removeEventListener","setTimeout","useEffect","onTouchStart","onMouseDown","isGameOver","field","index","Graveyard","sort","b","getValidMoves","length","makeMove","game","newGame","BoardHistory","StatusDisplay","gameOver","title","undoMove","Game","winner","position_FilterCondition","type_King_FilterCondition","color_FilterCondition","p","idFilterConditions","idPieceFilter","idFilterCondition","idFilter","Piece","target","newGameFactory","nextActivePieces","idIndex","c","d","f","g","pop","SplitscreenGame","setFirstBoard","isGameInitialized","setIsGameInitialized","showSettingsOverlay","setGame","newMove","window","innerWidth","screenHeight","screenHeigh","oldGame","UndoMoveComponent","acceptUndoMove","pieceFactory","obj","boardFactory","ReadyToShareComponent","URL","location","href","navigator","clipboard","writeText","backendEndpoint","OtherPlayerLeftComponent","OnlineGame","gameRoomID","match","params","socket","setSocket","setBoard","setPlayerColor","showUndoOverlay","setShowUndoOverlay","playerId","setPlayerId","setIsRoomExisting","hasCreatedGame","setHasCreatedGame","isRoomFull","setIsRoomFull","areTwoPlayersIngame","setAreTwoPlayersIngame","isInGame","setIsInGame","otherPlayerLeft","setOtherPlayerLeft","emit","JSON","stringify","socketIOClient","ENDPOINT","on","board_unparsed","parse","disconnect","NavigationMenu","navigationMenuClass","showNavigationMenu","toggleShowNavigationMenu","to","createNewGame","NavigationButton","navigationButtonClass","HomeComponent","history","useHistory","xmlns","version","viewBox","gradientTransform","offset","stopColor","attributeName","values","dur","begin","App","setShowNavigationMenu","setScreenWidth","innerHeight","setScreenHeight","fetch","newGameEndpoint","method","then","res","json","data","gameID","catch","err","handleScreenResize","exact","path","render","pathname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename"],"mappings":"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","file":"static/js/main.0f5eabde.chunk.js","sourcesContent":["const Colors = Object.freeze({\r\n    BLACK: \"BLACK\",\r\n    WHITE: \"WHITE\"\r\n})\r\nexport default Colors","import React, { useState } from 'react';\r\nimport './Settings.scss';\r\n\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\nimport Colors from '../../../Model/GameLogic/Colors';\r\n\r\n\r\nfunction Settings(props) {\r\n\r\n     function preventInnerClick(e){\r\n         e.stopPropagation();\r\n     }\r\n\r\n    return (\r\n        <div id=\"settings-overlay\" onClick={e =>  {\r\n            if(props.Board?.turn){ \r\n            \r\n            e.preventDefault();\r\n            props.setShowSettingsOverlay(false);\r\n            }\r\n        }}>\r\n            <div id=\"settings-main\" onClick={preventInnerClick}>\r\n\r\n                <h2><span>Settings</span></h2>\r\n\r\n                {props.firstBoard === Colors.WHITE\r\n                    ?\r\n                    <div className={props.screenWidth > 1000 ? \"settings-item settings-item-horizontal\" : \"settings-item settings-item-vertical\"}>\r\n                        <div className=\"white-container\">White</div>\r\n                        <div className=\"settings-item-icon\" onClick={props.toggleFirstBoard}>\r\n                            <SyncAltIcon />\r\n                        </div>\r\n                        <div className=\"black-container\">Black</div>\r\n                    </div>\r\n                    :\r\n                    <div className={props.screenWidth > 1000 ? \"settings-item settings-item-horizontal\" : \"settings-item settings-item-vertical\"}>\r\n                        <div className=\"black-container\">Black</div>\r\n                        <div className=\"settings-item-icon\" onClick={props.toggleFirstBoard}>\r\n                            <SyncAltIcon />\r\n                        </div>\r\n                        <div className=\"white-container\">White</div>\r\n                    </div>\r\n                }\r\n                <div className={props.screenWidth > 1000 ? \"settings-item settings-item-horizontal\" : \"settings-item settings-item-vertical\"}>\r\n                    <button onClick={props.initGame}>New game</button>\r\n                    {props.Board?.turn \r\n                    ?\r\n                    <button onClick={()=>props.setShowSettingsOverlay(false)}>Close settings</button>\r\n                    :\r\n                    ''\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Settings;","const Types = Object.freeze({\r\n\r\n    BISHOP: \"BISHOP\",\r\n    KING: \"KING\",\r\n    KNIGHT: \"KNIGHT\",\r\n    PAWN: \"PAWN\",\r\n    QUEEN: \"QUEEN\",\r\n    ROOK: \"ROOK\",\r\n})\r\nexport default Types;","const Colors = Object.freeze({\r\n    BLACK: \"BLACK\",\r\n    WHITE: \"WHITE\"\r\n})\r\nexport default Colors","const Types = Object.freeze({\r\n\r\n    BISHOP: \"BISHOP\",\r\n    KING: \"KING\",\r\n    KNIGHT: \"KNIGHT\",\r\n    PAWN: \"PAWN\",\r\n    QUEEN: \"QUEEN\",\r\n    ROOK: \"ROOK\",\r\n})\r\nexport {Types}","import Colors from './constants/Colors';\r\nimport { Types } from './constants/Types';\r\n\r\nfunction getPieceImage(type, color) {\r\n\r\n    if (type && color) {\r\n\r\n        const getImageSrc = (color, type) => {\r\n            switch (color) {\r\n                case Colors.WHITE: {\r\n                    switch (type) {\r\n                        case Types.BISHOP: return process.env.PUBLIC_URL+ \"/images/whiteBishop.svg\";\r\n                        case Types.KING: return process.env.PUBLIC_URL+ \"/images/whiteKing.svg\";\r\n                        case Types.KNIGHT: return process.env.PUBLIC_URL+ \"/images/whiteKnight.svg\";\r\n                        case Types.PAWN: return process.env.PUBLIC_URL+ \"/images/whitePawn.svg\" ;\r\n                        case Types.QUEEN: return process.env.PUBLIC_URL+ \"/images/whiteQueen.svg\" ;\r\n                        case Types.ROOK: return process.env.PUBLIC_URL+ \"/images/whiteRook.svg\" ;\r\n                        default: return '';\r\n                    }break;\r\n                }\r\n                case Colors.BLACK: {\r\n                    switch (type) {\r\n                        case Types.BISHOP: return process.env.PUBLIC_URL+ \"/images/blackBishop.svg\" ;\r\n                        case Types.KING: return process.env.PUBLIC_URL+ \"/images/blackKing.svg\" ;\r\n                        case Types.KNIGHT: return process.env.PUBLIC_URL+ \"/images/blackKnight.svg\" ;\r\n                        case Types.PAWN: return process.env.PUBLIC_URL+ \"/images/blackPawn.svg\" ;\r\n                        case Types.QUEEN: return process.env.PUBLIC_URL+ \"/images/blackQueen.svg\" ;\r\n                        case Types.ROOK: return process.env.PUBLIC_URL+ \"/images/blackRook.svg\" ;\r\n                        default: return '';\r\n                    }break;\r\n                }\r\n                default: return '';\r\n            }\r\n        }\r\n\r\n        const imgSrc = getImageSrc(color, type);\r\n        return <img alt=\"\" src = {imgSrc} draggable =\"false\" />\r\n    }\r\n}\r\nexport default getPieceImage;","import React from 'react';\r\nimport './Field.scss';\r\nimport Types from '../../../../../Model/GameLogic/Types';\r\nimport getPieceImage from '../../../getPieceImage';\r\n\r\n\r\n\r\n\r\n\r\nfunction Field(props) {\r\n\r\n    const piece = props.Board.getPieceByPosition(props.fieldNumber);\r\n    const pieceImage = piece ? getPieceImage(piece.type, piece.color) : '';\r\n\r\n\r\n   \r\n  \r\n\r\n    return (\r\n        <div className={\r\n            props.isKingInDanger\r\n                ?\r\n                'field attacked-king'\r\n                :\r\n                Math.floor(props.fieldNumber / 8) % 2 === 0\r\n                    ?\r\n                    props.fieldNumber % 2 === 0\r\n                        ?\r\n                        'field black-field'\r\n                        :\r\n                        'field white-field'\r\n                    :\r\n                    props.fieldNumber % 2 === 0\r\n                        ?\r\n                        'field white-field'\r\n                        :\r\n                        'field black-field'\r\n        }>\r\n        {\r\n                props.fieldNumber === props.selectedField && (props.playerColor === props.Board.turn || props.rotateColor) \r\n                    ?\r\n                    <div className=\"selected-field\"></div>\r\n                    :\r\n                    props.selectedFieldPossibleTargets\r\n                        ?\r\n                        props.selectedFieldPossibleTargets.includes(props.fieldNumber) && (props.playerColor === props.Board.turn || props.rotateColor)\r\n                            ?\r\n                            <div className=\"possible-move-field\"></div>\r\n                            :\r\n                            ''\r\n                        :\r\n                        ''\r\n            }\r\n            <div\r\n                id={`${props.playerColor}-${props.fieldNumber}-piece-image`}\r\n                className={\r\n                    piece\r\n                        ?\r\n                        props.rotateColor === piece.color\r\n                            ?\r\n                            'piece-container rotated-image'\r\n                            :\r\n                            'piece-container'\r\n                        :\r\n                        ''}>\r\n                         {pieceImage}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Field;","import React from 'react';\r\nimport './pawnDevelopment.scss'\r\nimport Types from '../../../../../Model/GameLogic/Types';\r\nimport Colors from '../../../../../Model/GameLogic/Colors';\r\nimport getPieceImage from '../../../getPieceImage';\r\n\r\nfunction PawnDevelopment(props) {\r\n\r\n   \r\n\r\n    const bishopIMG = props.Board.turn === Colors.WHITE ? getPieceImage(Types.BISHOP, Colors.WHITE) : getPieceImage(Types.BISHOP, Colors.BLACK);\r\n    const knightIMG =  props.Board.turn === Colors.WHITE ? getPieceImage(Types.KNIGHT, Colors.WHITE) : getPieceImage(Types.KNIGHT, Colors.BLACK);\r\n    const queenIMG = props.Board.turn === Colors.WHITE ? getPieceImage(Types.QUEEN, Colors.WHITE) : getPieceImage(Types.QUEEN, Colors.BLACK);\r\n    const rookIMG = props.Board.turn === Colors.WHITE ? getPieceImage(Types.ROOK, Colors.WHITE) : getPieceImage(Types.ROOK, Colors.BLACK);\r\n    \r\n    return (\r\n        props.playerColor === props.Board.turn || props.rotateColor\r\n        ?\r\n        <div className={props.rotateColor === props.Board.turn ? \"pawn-development-overlay pawn-development-overlay-rotated\" : \"pawn-development-overlay\"}>\r\n            <div className=\"selection-container\">\r\n                <div className=\"selection-item\" id={`${props.Board.turn}-bishop-selection`}>\r\n                    {bishopIMG}\r\n                </div>\r\n                <div className=\"selection-item\" id={`${props.Board.turn}-knight-selection`}>\r\n                    {knightIMG}\r\n                </div>\r\n                <div className=\"selection-item\" id={`${props.Board.turn}-queen-selection`}>\r\n                    {queenIMG}\r\n                </div>\r\n                <div className=\"selection-item\" id={`${props.Board.turn}-rook-selection`}>\r\n                    {rookIMG}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        :\r\n        ''\r\n    )\r\n}\r\n\r\nexport default PawnDevelopment;","class PieceFilterCondition{\r\n    constructor(property, value, pieceFilterConditionType){\r\n        this.property = property;\r\n        this.value = value;\r\n        this.pieceFilterConditionType = pieceFilterConditionType;\r\n    }    \r\n}\r\n\r\nexport default PieceFilterCondition;","\r\nconst PieceFilterConditionTypes = Object.freeze({\r\n    EQUAL:\"equal\",\r\n    UNEQUAL:\"unequal\"\r\n})\r\nexport default PieceFilterConditionTypes;","import PieceFilterConditionTypes from './PieceFilterConditionTypes';\r\n\r\nclass PieceFilter {\r\n    constructor(conditions) {\r\n        this.conditions = conditions;\r\n    }\r\n\r\n    filter(pieces) {\r\n        const newPieces = pieces.filter(piece => {\r\n            for (let cond of this.conditions) {\r\n                if (cond.pieceFilterConditionType === PieceFilterConditionTypes.EQUAL) {\r\n                    if (piece[cond.property] !== cond.value) {\r\n                        return false;\r\n                    }\r\n                } else {\r\n                    if (piece[cond.property] === cond.value) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        })\r\n        return newPieces;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default PieceFilter;","\r\nclass Move{\r\n    constructor(piece, targetPosition, removePiece, otherMovedPiece, otherTargetPosition){\r\n        this.piece = piece.copy();\r\n        this.targetPosition = targetPosition;\r\n        this.removePiece = removePiece;\r\n        this.otherMovedPiece = otherMovedPiece;\r\n        this.otherTargetPosition = otherTargetPosition;\r\n    }\r\n}\r\n\r\nexport default Move ;","import Move from './Move';\r\nimport Colors from './Colors';\r\nimport Types from './Types';\r\n\r\nfunction getPawnMoves(board, piece) {\r\n    if (piece.color === Colors.WHITE) {\r\n        let pawnRow = Math.floor(piece.getPosition() / 8);\r\n        let pawnCol = piece.getPosition() % 8;\r\n        let possibleMovesPawn = [];\r\n\r\n\r\n        if (board.getPieceByPosition(piece.getPosition() + 8) === null) {\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() + 8))\r\n            if (board.getPieceByPosition(piece.getPosition() + 16) === null && piece.hasMoved === false) {\r\n                possibleMovesPawn.push(new Move(piece, piece.getPosition() + 16));\r\n            }\r\n        }\r\n        let leftTacklePiece = board.getPieceByPosition(piece.getPosition() + 7);\r\n        if (leftTacklePiece !== null &&\r\n            leftTacklePiece.color === Colors.BLACK &&\r\n            pawnCol > 0) {\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() + 7, leftTacklePiece));\r\n        }\r\n        let rightTacklePiece = board.getPieceByPosition(piece.getPosition() + 9);\r\n        if (rightTacklePiece !== null &&\r\n            rightTacklePiece.color === Colors.BLACK &&\r\n            pawnCol < 7) {\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() + 9, rightTacklePiece));\r\n        }\r\n\r\n        // en passant\r\n        if (board.lastMovedPiece && board.lastMovedPiece.type === Types.PAWN) {\r\n\r\n            if (pawnCol === 0) {\r\n\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.BLACK &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() + 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() + 16) {\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() + 9, board.lastMovedPiece))\r\n                }\r\n\r\n            } else if (pawnCol === 7) {\r\n\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.BLACK &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() - 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() + 16) {\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() + 7,board.lastMovedPiece));\r\n                }\r\n\r\n            } else {\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.BLACK &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() + 1 &&\r\n                    board.lastMovedPiece.lastPosition ===board.lastMovedPiece.getPosition() + 16) {\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() + 9,board.lastMovedPiece))\r\n                }\r\n\r\n\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.BLACK &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() - 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() + 16) {\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() + 7,board.lastMovedPiece));\r\n                }\r\n\r\n            }\r\n        }\r\n        return (possibleMovesPawn);\r\n\r\n    } else if (piece.color === Colors.BLACK) {\r\n\r\n        let pawnCol = piece.getPosition() % 8\r\n        let possibleMovesPawn = [];\r\n        if (board.getPieceByPosition(piece.getPosition() - 8) === null) {\r\n\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() - 8));\r\n\r\n            if (board.getPieceByPosition(piece.getPosition() - 16) === null && piece.hasMoved === false) {\r\n                \r\n                possibleMovesPawn.push(new Move(piece, piece.getPosition() - 16));\r\n            }\r\n        }\r\n        let rightTacklePiece = board.getPieceByPosition(piece.getPosition() - 7);\r\n\r\n        if (rightTacklePiece !== null &&\r\n\r\n            rightTacklePiece.color === Colors.WHITE &&\r\n            pawnCol < 7) {\r\n\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() - 7, rightTacklePiece));\r\n        }\r\n        let leftTacklePiece = board.getPieceByPosition(piece.getPosition() - 9);\r\n        if (leftTacklePiece !== null &&\r\n            leftTacklePiece.color === Colors.WHITE &&\r\n            pawnCol > 0) {\r\n            possibleMovesPawn.push(new Move(piece, piece.getPosition() - 9, leftTacklePiece));\r\n        }\r\n\r\n        //en passant\r\n        if (board.lastMovedPiece && board.lastMovedPiece.type === Types.PAWN) {\r\n            \r\n         \r\n            if (pawnCol === 0) {\r\n\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.WHITE &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() + 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() - 16) {\r\n\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() - 7,board.lastMovedPiece));\r\n                }\r\n\r\n            } else if (pawnCol === 7) {\r\n\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.WHITE &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() - 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() - 16) {\r\n\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() - 9,board.lastMovedPiece));\r\n                }\r\n            } else {\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.WHITE &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() + 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() - 16) {\r\n\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() - 7,board.lastMovedPiece));\r\n                }\r\n                if (\r\n                    board.lastMovedPiece.color === Colors.WHITE &&\r\n                    board.lastMovedPiece.getPosition() === piece.getPosition() - 1 &&\r\n                    board.lastMovedPiece.lastPosition === board.lastMovedPiece.getPosition() - 16) {\r\n\r\n                    possibleMovesPawn.push(new Move(piece, piece.getPosition() - 9,board.lastMovedPiece));\r\n                }\r\n\r\n            }\r\n        }\r\n        return (possibleMovesPawn);\r\n\r\n    }\r\n}\r\nexport default getPawnMoves;","import Move from './Move';\r\n\r\n\r\nfunction getKnightMoves(Board, piece) {\r\n    let possibleMovesKnight = [];\r\n    let kinghtRow = Math.floor(piece.getPosition() / 8);\r\n    let knightCol = piece.getPosition() % 8;\r\n    const possibleKnightTargetsAsRowCol = [[kinghtRow + 1, knightCol + 2], [kinghtRow + 2, knightCol + 1], [kinghtRow + 1, knightCol - 2], [kinghtRow + 2, knightCol - 1],\r\n    [kinghtRow - 1, knightCol + 2], [kinghtRow - 2, knightCol + 1], [kinghtRow - 1, knightCol - 2], [kinghtRow - 2, knightCol - 1]];\r\n    possibleKnightTargetsAsRowCol.forEach((pos) => {\r\n\r\n        if (pos[0] > -1 && pos[1] > -1 && pos[0] < 8 && pos[1] < 8) {\r\n            let nextPosition = pos[0] * 8 + pos[1];\r\n            const pieceOnTarget = Board.getPieceByPosition(nextPosition);\r\n\r\n            if (pieceOnTarget === null) {\r\n                possibleMovesKnight.push(new Move(piece, nextPosition));\r\n            } else if (pieceOnTarget.color !== piece.color) {\r\n                possibleMovesKnight.push(new Move(piece, nextPosition, pieceOnTarget));\r\n            }\r\n        }\r\n    })\r\n    return (possibleMovesKnight);\r\n}\r\n\r\nexport default getKnightMoves;","import Move from './Move';\r\nimport Types from './Types'\r\nfunction getKingMoves(board, piece, checkForKingSafety) {\r\n\r\n    let possibleMovesKing = [];\r\n    let kingRow = Math.floor(piece.getPosition() / 8);\r\n    let kingCol = piece.getPosition() % 8;\r\n    const possibleKingTargetsAsRowCol = [[kingRow + 1, kingCol + 1], [kingRow + 1, kingCol + 0], [kingRow + 1, kingCol - 1],\r\n    [kingRow, kingCol - 1], [kingRow, kingCol + 1],\r\n    [kingRow - 1, kingCol + 1], [kingRow - 1, kingCol], [kingRow - 1, kingCol - 1]];\r\n\r\n    possibleKingTargetsAsRowCol.forEach((pos) => {\r\n        if (pos[0] > -1 && pos[1] > -1 && pos[0] < 8 && pos[1] < 8) {\r\n            const nextPosition = pos[0] * 8 + pos[1];\r\n            const pieceOnTarget = board.getPieceByPosition(nextPosition);\r\n\r\n            if (pieceOnTarget === null) {\r\n                possibleMovesKing.push(new Move(piece, nextPosition));\r\n            } else if (pieceOnTarget.color !== piece.color) {\r\n                possibleMovesKing.push(new Move(piece, nextPosition, pieceOnTarget));\r\n            }\r\n        }\r\n    })\r\n\r\n    //Rochade\r\n\r\n    if (piece.hasMoved === false &&\r\n        /* isKingSave(Board) === true &&\r\n        isKingSave(newBoard_kingOneToTheLeft) === true &&\r\n        isKingSave(newBoard_kingTwoToTheLeft) === true && */\r\n        board.getPieceByPosition(piece.getPosition() - 1) === null &&\r\n        board.getPieceByPosition(piece.getPosition() - 2) === null &&\r\n        board.getPieceByPosition(piece.getPosition() - 3) === null &&\r\n        board.getPieceByPosition(piece.getPosition() - 4) !== null &&\r\n        board.getPieceByPosition(piece.getPosition() - 4).type === Types.ROOK &&\r\n        board.getPieceByPosition(piece.getPosition() - 4).hasMoved === false) {\r\n        possibleMovesKing.push(new Move(piece, piece.getPosition() - 2, null, board.getPieceByPosition(piece.getPosition() - 4), piece.getPosition() - 1))\r\n    }\r\n    if (piece.hasMoved === false &&\r\n        /* isKingSave(Board) === true &&\r\n        isKingSave(newBoard_kingOneToTheRight) === true &&\r\n        isKingSave(newBoard_kingTwoToTheRight) === true && */\r\n        board.getPieceByPosition(piece.getPosition() + 1) === null &&\r\n        board.getPieceByPosition(piece.getPosition() + 2) === null &&\r\n\r\n        board.getPieceByPosition(piece.getPosition() + 3) !== null &&\r\n        board.getPieceByPosition(piece.getPosition() + 3).type === Types.ROOK &&\r\n        board.getPieceByPosition(piece.getPosition() + 3).hasMoved === false) {\r\n        possibleMovesKing.push(new Move(piece, piece.getPosition() + 2, null, board.getPieceByPosition(piece.getPosition() + 3), piece.getPosition() + 1));\r\n    }\r\n    //}\r\n    return possibleMovesKing;\r\n}\r\n\r\nexport default getKingMoves;","import Move from './Move';\r\n\r\n\r\nfunction getRookMoves(board, piece) {\r\n    let possibleMovesRook = [];\r\n\r\n    let rookRow = Math.floor(piece.position / 8);\r\n    let rookCol = piece.position % 8;\r\n    let continueCountingRook = true\r\n\r\n    //row left\r\n    for (let i = 1; continueCountingRook; i++) {\r\n\r\n        let nextCol = rookCol - i;\r\n        let nextPosition = rookRow * 8 + nextCol;\r\n\r\n        if (nextCol > -1 &&\r\n            board.getPieceByPosition(nextPosition) === null\r\n        ) {\r\n            possibleMovesRook.push(new Move(piece, nextPosition));\r\n        } else if (nextCol > -1 &&\r\n            board.getPieceByPosition(nextPosition).color !== piece.color\r\n        ) {\r\n            const removedPiece = board.getPieceByPosition(nextPosition);\r\n            possibleMovesRook.push(new Move(piece, nextPosition, removedPiece));\r\n            continueCountingRook = false;\r\n        } else {\r\n            continueCountingRook = false;\r\n        }\r\n    }\r\n\r\n    //row right\r\n    continueCountingRook = true;\r\n    for (let i = 1; continueCountingRook; i++) {\r\n        let nextCol = rookCol + i\r\n        let nextPosition = rookRow * 8 + nextCol;\r\n\r\n        if (nextCol < 8\r\n            &&\r\n            board.getPieceByPosition(nextPosition) === null\r\n        ) {\r\n            possibleMovesRook.push(new Move(piece, nextPosition));\r\n        } else if (nextCol < 8 &&\r\n            board.getPieceByPosition(nextPosition).color !== piece.color\r\n        ) {\r\n            const removedPiece = board.getPieceByPosition(nextPosition);\r\n            possibleMovesRook.push(new Move(piece, nextPosition, removedPiece));\r\n            continueCountingRook = false;\r\n        } else {\r\n            continueCountingRook = false;\r\n        }\r\n    }\r\n\r\n\r\n    //col top \r\n    continueCountingRook = true;\r\n    for (let i = 1; continueCountingRook; i++) {\r\n        let nextRow = rookRow + i;\r\n        let nextPosition = (nextRow * 8) + rookCol;\r\n\r\n        if (nextRow < 8 && board.getPieceByPosition(nextPosition) === null\r\n        ) {\r\n            possibleMovesRook.push(new Move(piece, nextPosition));\r\n        } else if (nextRow < 8 && board.getPieceByPosition(nextPosition).color !== piece.color\r\n        ) {\r\n            const removedPiece = board.getPieceByPosition(nextPosition);\r\n            possibleMovesRook.push(new Move(piece, nextPosition, removedPiece));\r\n            continueCountingRook = false;\r\n        } else {\r\n            continueCountingRook = false;\r\n        }\r\n    }\r\n    // col bot\r\n    continueCountingRook = true;\r\n    for (let i = 1; continueCountingRook; i++) {\r\n        let nextRow = rookRow - i;\r\n        let nextPosition = (nextRow * 8) + rookCol;\r\n\r\n        if (nextRow > -1 && board.getPieceByPosition(nextPosition) === null\r\n        ) {\r\n            possibleMovesRook.push(new Move(piece, nextPosition));\r\n        } else if (nextRow > -1 && board.getPieceByPosition(nextPosition).color !== piece.color\r\n        ) {\r\n            const removedPiece = board.getPieceByPosition(nextPosition);\r\n            possibleMovesRook.push(new Move(piece, nextPosition, removedPiece));\r\n            continueCountingRook = false;\r\n        } else {\r\n            continueCountingRook = false;\r\n        }\r\n    }\r\n\r\n    return possibleMovesRook;\r\n}\r\n\r\nexport default getRookMoves;","\r\nimport Move from './Move';\r\n\r\nfunction getBishopMoves(board, piece) {\r\n    let possibleMovesBishop = [];\r\n\r\n    let bishopRow = Math.floor(piece.getPosition() / 8);\r\n    let bishopCol = piece.getPosition() % 8;\r\n    let continueCountingBishop = true\r\n\r\n    //bot left\r\n    for (let i = 1; continueCountingBishop; i++) {\r\n\r\n        let nextCol = bishopCol - i;\r\n        let nextRow = bishopRow - i;\r\n        let nextPosition = nextRow * 8 + nextCol;\r\n        const pieceOnTarget = board.getPieceByPosition(nextPosition);\r\n\r\n        if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget === null\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition));\r\n        } else if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget.color !== piece.color\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition, pieceOnTarget))\r\n            continueCountingBishop = false;\r\n        } else {\r\n            continueCountingBishop = false;\r\n        }\r\n    }\r\n\r\n    //bot right\r\n    continueCountingBishop = true;\r\n    for (let i = 1; continueCountingBishop; i++) {\r\n        let nextCol = bishopCol + i\r\n        let nextRow = bishopRow - i;\r\n        let nextPosition = nextRow * 8 + nextCol;\r\n        const pieceOnTarget = board.getPieceByPosition(nextPosition);\r\n\r\n        if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget === null\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition))\r\n        } else if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget.color !== piece.color\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition, pieceOnTarget))\r\n            continueCountingBishop = false;\r\n        } else {\r\n            continueCountingBishop = false;\r\n        }\r\n    }\r\n\r\n\r\n    //top left \r\n    continueCountingBishop = true;\r\n    for (let i = 1; continueCountingBishop; i++) {\r\n        let nextCol = bishopCol - i\r\n        let nextRow = bishopRow + i;\r\n        let nextPosition = (nextRow * 8) + nextCol;\r\n        const pieceOnTarget = board.getPieceByPosition(nextPosition);\r\n        if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget === null\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition))\r\n        } else if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget.color !== piece.color\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition, pieceOnTarget))\r\n            continueCountingBishop = false;\r\n        } else {\r\n            continueCountingBishop = false;\r\n        }\r\n    }\r\n    // top right\r\n    continueCountingBishop = true;\r\n    for (let i = 1; continueCountingBishop; i++) {\r\n        let nextCol = bishopCol + i\r\n        let nextRow = bishopRow + i;\r\n        let nextPosition = (nextRow * 8) + nextCol;\r\n        const pieceOnTarget = board.getPieceByPosition(nextPosition);\r\n\r\n        if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget === null\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition))\r\n        } else if (nextRow < 8 && nextRow > -1 && nextCol < 8 && nextCol > -1 &&\r\n            pieceOnTarget.color !== piece.color\r\n        ) {\r\n            possibleMovesBishop.push(new Move(piece, nextPosition, pieceOnTarget))\r\n            continueCountingBishop = false;\r\n        } else {\r\n            continueCountingBishop = false;\r\n        }\r\n    }\r\n    return possibleMovesBishop;\r\n}\r\n\r\nexport default getBishopMoves;","import getRookMoves from './getRookMoves';\r\nimport getBishopMoves from './getBishopMoves';\r\n\r\n\r\nfunction getQueenMoves(board, piece) {\r\n    let possibleQueenMoves = [];\r\n    possibleQueenMoves = [...getBishopMoves(board, piece), ...getRookMoves(board, piece)]\r\n    return possibleQueenMoves;\r\n}\r\n\r\nexport default getQueenMoves;","import getPawnMoves from './getPawnMoves';\r\nimport getKnightMoves from './getKnightMoves';\r\nimport getKingMoves from './getKingMoves';\r\nimport getQueenMoves from './getQueenMoves';\r\nimport getRookMoves from './getRookMoves';\r\nimport getBishopMoves from './getBishopMoves';\r\nimport Types from './Types';\r\n\r\nfunction getPieceMoves(piece, board){\r\n\r\n    if (piece.type === Types.PAWN) {\r\n\r\n        return  getPawnMoves(board, piece);\r\n\r\n    } else if (piece.type === Types.BISHOP) {\r\n\r\n        return  getBishopMoves(board, piece);\r\n\r\n    } else if (piece.type === Types.KNIGHT) {\r\n\r\n        return  getKnightMoves(board, piece);\r\n\r\n    } else if (piece.type === Types.ROOK) {\r\n\r\n        return getRookMoves(board, piece);\r\n\r\n    } else if (piece.type === Types.QUEEN) {\r\n\r\n        return getQueenMoves(board, piece);\r\n\r\n    } else if (piece.type === Types.KING) {\r\n        //getKingMoves(board, piece,checkForKingSafety)\r\n        return getKingMoves(board, piece);\r\n\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default getPieceMoves;","\r\n\r\nimport PieceFilterCondition from './PieceFilterCondition';\r\nimport PieceFilterConditionTypes from './PieceFilterConditionTypes';\r\nimport PieceFilter from './PieceFilter';\r\nimport getPieceMoves from './getPieceMoves';\r\n//function getMoves(board, checkForKingSafety) \r\nfunction getMoves(board) {\r\n   \r\n    let allMoves = [];\r\n\r\n    const p_FilterCondition_Color = new PieceFilterCondition(\"color\", board.turn, PieceFilterConditionTypes.EQUAL);\r\n\r\n    const p_Filter = new PieceFilter([p_FilterCondition_Color]);\r\n\r\n    let pieces = p_Filter.filter(board.activePieces);\r\n\r\n    pieces.forEach((piece) => {\r\n        \r\n        allMoves.push(...getPieceMoves(piece , board));\r\n    });\r\n\r\n\r\n\r\n    return allMoves;\r\n\r\n\r\n    \r\n\r\n\r\n}\r\n\r\nexport default getMoves;","import getMoves from \"./getMoves\";\r\n\r\n\r\n\r\nfunction isKingAttacked(board){\r\n\r\n    const newBoard = board.copy();\r\n    \r\n    newBoard.switchTurn();\r\n    const allMoves = getMoves(newBoard);\r\n    const king = newBoard.getKing(board.turn);\r\n    for( let move of allMoves){\r\n        if(move.targetPosition === king.getPosition()) return true;\r\n    }\r\n    return false;\r\n\r\n}\r\n\r\nexport default isKingAttacked;","import React from 'react';\r\nimport './GameOver.scss';\r\nimport isKingAttacked from '../../../../Model/GameLogic/isKingAttacked';\r\nimport Colors from '../../constants/Colors';\r\nfunction GameOver(props) {\r\n\r\n \r\n    return (\r\n        <div className=\"game-over-overlay\">\r\n            <div className=\"game-over-container\">\r\n                <span> Game Over </span>\r\n                <span>{isKingAttacked(props.Board)\r\n                    ?\r\n                    (props.Board.turn === Colors.WHITE \r\n                    ? \r\n                    'Black' \r\n                    : \r\n                    \r\n                    'White') + ' won'\r\n                :\r\n\r\n                'Remis'}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameOver;","\r\nfunction getBoardAfterMove(board, move){\r\n\r\n    const exchangedPieces = [];\r\n            \r\n    const movedPiece = move.piece.copy();\r\n    movedPiece.move(move.targetPosition);\r\n    exchangedPieces.push(movedPiece);\r\n    \r\n    if(move.otherMovedPiece){\r\n        const otherMovedPiece = move.otherMovedPiece.copy(); \r\n        otherMovedPiece.move(move.otherTargetPosition);\r\n        exchangedPieces.push(otherMovedPiece)\r\n    }\r\n    const newBoard = board.copyWithExchangedPieces(exchangedPieces);\r\n    \r\n    if(move.removePiece){\r\n        newBoard.removePiece(move.removePiece);\r\n        const newRemovedPiece = move.removePiece.copy();\r\n        newBoard.graveyardPieces.push(newRemovedPiece);\r\n    }\r\n    newBoard.round = newBoard.round + 1;\r\n    newBoard.lastMovedPiece = movedPiece;\r\n    newBoard.switchTurn();\r\n    return newBoard;\r\n}\r\n\r\nexport default getBoardAfterMove;","\r\nimport Types from './Types';\r\nimport getMoves from './getMoves';\r\nimport getBoardAfterMove from './getBoardAfterMove';\r\nimport Move from './Move';\r\nimport isKingAttacked from './isKingAttacked';\r\nfunction isValidMove(move, board) {\r\n   \r\n    if (move.piece.type === Types.KING) {\r\n        //Rochade \r\n        if (move.otherMovedPiece) {\r\n\r\n            if(isKingAttacked(board)){\r\n                return false;\r\n            }\r\n\r\n            // check for Each field if move would be possible\r\n            if (move.targetPosition === move.piece.getPosition() - 2) {\r\n                for (let i = 1; i < 3; i++) {\r\n                    const newMove = new Move(move.piece, move.piece.getPosition() - i);\r\n                    if (!isValidMove( newMove, board)) return false;\r\n                }\r\n            } else if (move.targetPosition === move.piece.getPosition() + 2) {\r\n                for (let i = 1; i < 3; i++) {\r\n                    const newMove = new Move(move.piece, move.piece.getPosition() + i);\r\n                    if (!isValidMove(  newMove, board)) return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // get POsition of the King and check if \r\n\r\n    \r\n    const newBoard = getBoardAfterMove(board, move);\r\n\r\n    const enemyMoves = getMoves(newBoard);\r\n    const king = newBoard.getKing(board.turn);\r\n    \r\n    for (let enemyMove of enemyMoves) {\r\n        \r\n        if (enemyMove.targetPosition === king.getPosition()) {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport default isValidMove;","import React, { useState, useEffect } from 'react';\r\nimport Colors from '../../../../Model/GameLogic/Colors';\r\nimport Field from './Field/Field';\r\nimport './BoardComponent.scss';\r\nimport PawnDevelopment from './PawnDevelopment/PawnDevelopment'\r\nimport GameOver from '../GameOver/GameOver';\r\nimport isKingAttacked from '../../../../Model/GameLogic/isKingAttacked';\r\nimport isValidMove from '../../../../Model/GameLogic/isValidMove';\r\nimport getPieceMoves from '../../../../Model/GameLogic/getPieceMoves';\r\nimport Types from '../../../../Model/GameLogic/Types'\r\n\r\n\r\n\r\nfunction BoardComponent(props) {\r\n\r\n    const [selectedField, setSelectedField] = useState(null);\r\n    const [selectedFieldPossibleTargets, setSelectedFieldPossibleTargets] = useState([]);\r\n    const fields = new Array(64).fill(null);\r\n\r\n\r\n    const kingAttacked = isKingAttacked(props.Board);\r\n    const kingPosition = props.Board.getKing(props.Board.turn).getPosition();\r\n\r\n    useEffect(() => {\r\n\r\n        setSelectedField(null);\r\n        setSelectedFieldPossibleTargets([]);\r\n\r\n    }, [props.Board]);\r\n\r\n    function selectPawnDevelopment() {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            document.getElementById(`${props.Board.turn}-bishop-selection`).addEventListener('click', () => {\r\n                resolve(Types.BISHOP)\r\n            });\r\n            document.getElementById(`${props.Board.turn}-knight-selection`).addEventListener('click', () => {\r\n                resolve(Types.KNIGHT)\r\n            });\r\n            document.getElementById(`${props.Board.turn}-queen-selection`).addEventListener('click', () => {\r\n                resolve(Types.QUEEN)\r\n            });\r\n            document.getElementById(`${props.Board.turn}-rook-selection`).addEventListener('click', () => {\r\n                resolve(Types.ROOK)\r\n            });\r\n        })\r\n    }\r\n\r\n\r\n\r\n    async function moveToSelectedField(nextMove) {\r\n        if (nextMove.piece.type === Types.PAWN &&\r\n            (nextMove.targetPosition < 8 || nextMove.targetPosition > 55)) {\r\n\r\n            document.getElementsByClassName('pawn-development-overlay')[0].style.display = \"block\";\r\n            nextMove.piece.type = await selectPawnDevelopment();\r\n            document.getElementsByClassName('pawn-development-overlay')[0].style.display = \"none\";\r\n        }\r\n        props.move(nextMove)\r\n\r\n    }\r\n\r\n    function unselectField() {\r\n        setSelectedField(null);\r\n        setSelectedFieldPossibleTargets([]);\r\n\r\n    }\r\n\r\n\r\n    //if move is executed by pointerdown + pointermove : pass selected position as selectedPosition,\r\n    // if field is only clicked set selectedField and selectedFieldPossibleTargets in state for the next click\r\n\r\n    function pointerDownField(e, pointerType) {\r\n        console.log(e)\r\n\r\n    \r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        e.cancelBubble = true;\r\n        const selectedPosition = getMousePositionField(e);\r\n        let newSelectedFieldPossiblePositions;\r\n        console.log(selectedPosition)\r\n\r\n        if (props.Board.turn === props.playerColor || props.rotateColor) {\r\n\r\n            console.log('in here');\r\n            const pieceOnClickedField = props.Board.getPieceByPosition(selectedPosition);\r\n            console.log(pieceOnClickedField)\r\n\r\n            if (pieceOnClickedField && pieceOnClickedField.color === props.Board.turn) {\r\n\r\n                const pieceMoves = getPieceMoves(pieceOnClickedField, props.Board)\r\n                newSelectedFieldPossiblePositions = pieceMoves.filter(move => {\r\n\r\n                    return (isValidMove(move, props.Board))\r\n\r\n                }).map(m => {\r\n\r\n                    return m.targetPosition\r\n                });\r\n\r\n                setSelectedField(selectedPosition);\r\n                setSelectedFieldPossibleTargets(newSelectedFieldPossiblePositions)\r\n                const boardContainer = document.getElementById(`board-${props.playerColor}`);\r\n                //document.addEventListener('mousemove', movePieceImage, false);\r\n                if (pointerType === \"mouse\") {\r\n                    boardContainer.addEventListener('mousemove', movePieceImage, false);\r\n                    boardContainer.addEventListener('mouseup', pointerUpField, false);\r\n                }\r\n                if (pointerType === \"touch\") {\r\n                    console.log('adding rouch listener')\r\n                    boardContainer.addEventListener('touchmove', movePieceImage, false);\r\n                    boardContainer.addEventListener('touchend', pointerUpField, false);\r\n\r\n                }\r\n                //document.addEventListener('mouseup', pointerUpField, false);\r\n\r\n            } else if (selectedField || selectedField === 0) {\r\n\r\n                if (selectedFieldPossibleTargets.includes(selectedPosition)) {\r\n\r\n\r\n                    const pieceOnSelectedField = props.Board.getPieceByPosition(selectedField);\r\n                    const possibleMoves = getPieceMoves(pieceOnSelectedField, props.Board);\r\n                    console.log(props.Board)\r\n                    console.log(pieceOnSelectedField);\r\n                    console.log(possibleMoves);\r\n                    const nextMove = possibleMoves.find(move => move.targetPosition === selectedPosition)\r\n\r\n                    if (nextMove) {\r\n\r\n                        unselectField();\r\n                        moveToSelectedField(nextMove)\r\n\r\n                    } else {\r\n                        unselectField();\r\n                    }\r\n                }else{\r\n                    unselectField();\r\n                }\r\n            } else {\r\n                unselectField();\r\n            }\r\n        }\r\n\r\n\r\n\r\n        function movePieceImage(e) {\r\n            console.log('movepiece', e);\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            const boardContainer = document.getElementById(`board-${props.playerColor}`);\r\n            const pieceIMG = document.getElementById(`${props.playerColor}-${selectedPosition}-piece-image`);\r\n            const boardOffset = boardContainer.getBoundingClientRect();\r\n\r\n            const pieceWidth = (boardContainer.clientWidth / 8) * 1.5;\r\n\r\n            const xOnViewport = pointerType === \"mouse\" ? e.clientX : e.changedTouches[0].clientX;\r\n            const yOnViewport = pointerType === \"mouse\" ? e.clientY : e.changedTouches[0].clientY;\r\n            const mouseX = xOnViewport > boardOffset.left\r\n                ?\r\n                xOnViewport < boardOffset.right ?\r\n                    xOnViewport - (pieceWidth / 2)\r\n                    :\r\n                    boardOffset.right - (pieceWidth / 2)\r\n                :\r\n                boardOffset.left - (pieceWidth / 2);\r\n            const mouseY = yOnViewport > boardOffset.top\r\n                ?\r\n                yOnViewport < boardOffset.bottom\r\n                    ?\r\n                    yOnViewport - (pieceWidth / 2)\r\n                    :\r\n                    boardOffset.bottom - (pieceWidth / 2)\r\n                :\r\n                boardOffset.top - (pieceWidth / 2)\r\n                ;\r\n\r\n            pieceIMG.style.position = 'fixed';\r\n            pieceIMG.style.top = `${mouseY}px`;\r\n            pieceIMG.style.left = `${mouseX}px`;\r\n            pieceIMG.style.zIndex = 200;\r\n            pieceIMG.style.height = `${pieceWidth}px`;\r\n            pieceIMG.style.width = `${pieceWidth}px`;\r\n\r\n        }\r\n\r\n        function getMousePositionField(e) {\r\n            const boardContainer = document.getElementById(`board-${props.playerColor}`);\r\n\r\n            const leftBorder = boardContainer.getBoundingClientRect().left;\r\n            const topBorder = boardContainer.getBoundingClientRect().top;\r\n            const rightBorder = boardContainer.getBoundingClientRect().right;\r\n            const bottomBorder = boardContainer.getBoundingClientRect().bottom;\r\n            const xOnViewport = pointerType === \"mouse\" ? e.clientX : e.changedTouches[0].clientX;\r\n            const yOnViewport = pointerType === \"mouse\" ? e.clientY : e.changedTouches[0].clientY;\r\n            const boardContainerWidth = rightBorder - leftBorder;\r\n            const boardContainerHeight = bottomBorder - topBorder;\r\n            const col = props.rotateColor\r\n                ?\r\n                props.firstBoard === Colors.WHITE\r\n                    ?\r\n                    Math.floor(((xOnViewport - leftBorder) / boardContainerWidth) * 8)\r\n                    :\r\n                    Math.floor(((rightBorder - xOnViewport) / boardContainerWidth) * 8)\r\n                :\r\n                props.playerColor === Colors.WHITE\r\n                    ?\r\n                    Math.floor(((xOnViewport - leftBorder) / boardContainerWidth) * 8)\r\n                    :\r\n                    Math.floor(((rightBorder - xOnViewport) / boardContainerWidth) * 8);\r\n            const row = props.rotateColor\r\n                ?\r\n                props.firstBoard === Colors.WHITE\r\n                    ?\r\n                    Math.floor(((bottomBorder - yOnViewport) / boardContainerHeight) * 8)\r\n                    :\r\n                    Math.floor(((yOnViewport - topBorder) / boardContainerHeight) * 8)\r\n                :\r\n                props.playerColor === Colors.WHITE\r\n                    ?\r\n                    Math.floor(((bottomBorder - yOnViewport) / boardContainerHeight) * 8)\r\n                    :\r\n                    Math.floor(((yOnViewport - topBorder) / boardContainerHeight) * 8);\r\n            return col + row * 8;\r\n\r\n        }\r\n\r\n        function pointerUpField(e) {\r\n            console.log(\"in pointer up\")\r\n            const fieldNumber = getMousePositionField(e);\r\n            const boardContainer = document.getElementById(`board-${props.playerColor}`);\r\n            // document.removeEventListener('mousemove', movePieceImage, false);\r\n            if (pointerType === \"mouse\") {\r\n                boardContainer.removeEventListener('mousemove', movePieceImage, false);\r\n                boardContainer.removeEventListener('mouseup', pointerUpField, false);\r\n            }\r\n\r\n            if (pointerType === \"touch\") {\r\n                boardContainer.removeEventListener('touchmove', movePieceImage, false);\r\n                boardContainer.removeEventListener('touchend', pointerUpField, false);\r\n            }\r\n\r\n            // document.removeEventListener('mouseup', pointerUpField, false);\r\n            const pieceIMG = document.getElementById(`${props.playerColor}-${selectedPosition}-piece-image`);\r\n\r\n            if (props.Board.turn === props.playerColor || props.rotateColor) {\r\n\r\n\r\n                if (selectedPosition || selectedPosition === 0) {\r\n\r\n                    if (newSelectedFieldPossiblePositions.includes(fieldNumber)) {\r\n\r\n                        const pieceOnSelectedField = props.Board.getPieceByPosition(selectedPosition);\r\n                        const possibleMoves = getPieceMoves(pieceOnSelectedField, props.Board);\r\n                        const nextMove = possibleMoves.find(move => move.targetPosition === fieldNumber)\r\n\r\n                        if (nextMove) {\r\n                            unselectField();\r\n                            pieceIMG.style.display = 'none';\r\n                            const pieceFade = setTimeout(() => {\r\n                                pieceIMG.style = null;\r\n                            }, 200);\r\n                            moveToSelectedField(nextMove);\r\n\r\n                        } else if (selectedPosition !== fieldNumber) {\r\n                            pieceIMG.style = null;\r\n                            unselectField();\r\n                        } else {\r\n                            pieceIMG.style = null;\r\n                            unselectField();\r\n                        }\r\n                    } else {\r\n                        pieceIMG.style = null;\r\n                    }\r\n                } else {\r\n                    pieceIMG.style = null;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div className={\r\n            props.rotateColor\r\n                ?\r\n                props.firstBoard === Colors.WHITE\r\n                    ?\r\n                    \"game-container\"\r\n                    :\r\n                    \"game-reverse-container\"\r\n                :\r\n\r\n                props.playerColor === Colors.WHITE\r\n                    ?\r\n                    props.Board.turn === Colors.WHITE\r\n                        ?\r\n                        \"game-container game-container-to-move\"\r\n                        :\r\n\r\n                        \"game-container\"\r\n                    :\r\n                    props.Board.turn === Colors.BLACK\r\n                        ?\r\n                        \"game-reverse-container game-container-to-move\"\r\n                        :\r\n                        \"game-reverse-container\"\r\n        }\r\n            id={`board-${props.playerColor}`}\r\n            onTouchStart={e => pointerDownField(e, \"touch\")}\r\n            onMouseDown={e => pointerDownField(e, \"mouse\")}\r\n\r\n        >\r\n            {props.Board.isGameOver ? <GameOver Board={props.Board} /> : ''}\r\n\r\n            <PawnDevelopment\r\n                playerColor={props.playerColor}\r\n                Board={props.Board}\r\n            />\r\n            {\r\n                fields.map((field, index) => (\r\n                    <Field\r\n                        rotateColor={props.rotateColor}\r\n                        selectedField={selectedField}\r\n                        setSelectedField={setSelectedField}\r\n                        selectedFieldPossibleTargets={selectedFieldPossibleTargets}\r\n                        setSelectedFieldPossibleTargets={setSelectedFieldPossibleTargets}\r\n                        fieldNumber={index}\r\n                        move={props.move}\r\n                        playerColor={props.playerColor}\r\n                        Board={props.Board}\r\n                        isKingInDanger={kingAttacked && kingPosition === index} />\r\n                ))\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BoardComponent;","\r\nimport React from 'react';\r\nimport Types from '../../../../Model/GameLogic/Types';\r\nimport getPieceImage from '../../getPieceImage';\r\nimport './Graveyard.scss';\r\n\r\nfunction Graveyard(props) {\r\n    return (\r\n        <div className=\"graveyard-container\">\r\n            {   \r\n                props.Board.graveyardPieces.filter((piece) => piece.color !== props.playerColor)\r\n                .sort((a,b) =>{\r\n                    console.log(a.type)\r\n                    switch(a.type){\r\n                        default: return 0;\r\n                        case Types.PAWN: {\r\n                            switch(b.type){\r\n                                default: \r\n                                case Types.PAWN: return 0;\r\n                                case Types.KNIGHT: return -1;\r\n                                case Types.BISHOP: return -1;\r\n                                case Types.ROOK : return -1;\r\n                                case Types.QUEEN: return -1;\r\n                            }\r\n                        }\r\n                        case Types.KNIGHT: {\r\n                            switch(b.type){\r\n                                default: \r\n                                case Types.PAWN: return 1;\r\n                                case Types.KNIGHT: return 0;\r\n                                case Types.BISHOP: return -1;\r\n                                case Types.ROOK : return -1;\r\n                                case Types.QUEEN: return -1;\r\n                            }\r\n                        }\r\n\r\n                        case Types.BISHOP: {\r\n                            switch(b.type){\r\n                                default: \r\n                                case Types.PAWN: return 1;\r\n                                case Types.KNIGHT: return 1;\r\n                                case Types.BISHOP: return 0;\r\n                                case Types.ROOK : return -1;\r\n                                case Types.QUEEN: return -1;\r\n                            }\r\n                        }\r\n\r\n                        case Types.ROOK: {\r\n                            switch(b.type){\r\n                                default: \r\n                                case Types.PAWN: return 1;\r\n                                case Types.KNIGHT: return 1;\r\n                                case Types.BISHOP: return 1;\r\n                                case Types.ROOK : return 0;\r\n                                case Types.QUEEN: return -1;\r\n                            }\r\n                        }\r\n\r\n                        case Types.QUEEN: {\r\n                            switch(b.type){\r\n                                default: \r\n                                case Types.PAWN: return 1;\r\n                                case Types.KNIGHT: return 1;\r\n                                case Types.BISHOP: return 1;\r\n                                case Types.ROOK : return 1;\r\n                                case Types.QUEEN: return 0;\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n                .map((piece, index) => {\r\n                        return (\r\n                            <div key = {index} className=\"graveyard-item\">\r\n                                {getPieceImage(piece.type, piece.color)}\r\n                            </div>)\r\n                    })\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Graveyard;\r\n\r\n\r\n","\r\n\r\nimport getMoves from './getMoves';\r\nimport isValidMove from './isValidMove';\r\n\r\nfunction getValidMoves(board){\r\n\r\n    const allMoves = getMoves(board)\r\n    const allValidMoves = allMoves.filter(move => {\r\n        return isValidMove(move,board);\r\n    })    \r\n    return allValidMoves;\r\n\r\n}\r\n\r\nexport default getValidMoves;","import getValidMoves from './getValidMoves';\r\n\r\n\r\nfunction isGameOver(board){\r\n    const allMoves = getValidMoves(board);\r\n    return allMoves.length === 0;\r\n}\r\n\r\nexport default isGameOver;","\r\nimport isGameOver from './isGameOver';\r\nimport getBoardAfterMove from './getBoardAfterMove';\r\n\r\nfunction makeMove(game, move){\r\n    \r\n    \r\n    const newPiece = move.piece.copy();\r\n    newPiece.move(move.targetPosition);\r\n\r\n    const newGame = game.copy();\r\n    const newBoard = getBoardAfterMove(newGame.Board , move) ;\r\n   \r\n    newBoard.isGameOver = isGameOver(newBoard);\r\n    newGame.Board = newBoard;\r\n    newGame.BoardHistory.push(game.Board);\r\n    return newGame;\r\n    \r\n}\r\n\r\nexport default makeMove;","import React from 'react';\r\nimport Colors from '../../../../Model/GameLogic/Colors';\r\nimport './StatusDisplay.scss';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nfunction StatusDisplay(props) {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"status-container\">\r\n        {props.Board.turn  ? \r\n        <>\r\n            <div className=\"vertical-status-item\">\r\n                <span>Turn:</span>\r\n                <span>\r\n                    {props.Board.turn === Colors.WHITE\r\n                            ?\r\n                            'White'\r\n                            :\r\n                            'Black'\r\n                        }\r\n                </span>\r\n            </div>\r\n            <div className=\"vertical-status-item\">\r\n                <span>Round: </span>\r\n                <span>\r\n                    {props.Board.round ? props.Board.round : 0}\r\n                </span>\r\n            </div>\r\n            <div className=\"horizontal-status-item\">\r\n\r\n                {!props.Board.gameOver\r\n                    ?\r\n                    <span className=\"icon\" title=\"undo move\">\r\n                        <RestoreIcon style={{ 'height': '40px', 'width': '40px' }} onClick={props.undoMove}>\r\n\r\n                        </RestoreIcon>\r\n                    </span>\r\n                    :\r\n                    ''\r\n                }\r\n\r\n                <span>\r\n                    {props.setShowSettingsOverlay ?\r\n                        <SettingsIcon title=\"Settings\" style={{ 'height': '40px', 'width': '40px' }} onClick={e => props.setShowSettingsOverlay(true)}>\r\n\r\n                        </SettingsIcon>\r\n                        :\r\n                        ''\r\n                    }\r\n                </span>\r\n            </div>\r\n            </>\r\n            : \r\n            <div className=\"vertical-status-item\"><span>Waiting for opponent</span></div>\r\n\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default StatusDisplay;","\nclass Game {\n    constructor(\n        Board, BoardHistory,winner\n    ) {\n\n        this.Board = Board;\n        this.BoardHistory = BoardHistory || [];\n        this.winner = winner || null;\n    }\n\n    copy(){\n        const newBoard = this.Board.copy();\n        const newBoardHistory = this.BoardHistory.map(board => board.copy());\n        const newWinner = this.winner;\n        return new Game(newBoard, newBoardHistory, newWinner);\n    }\n\n\n    \n\n}\n\nexport default Game","\r\nimport PieceFilterConditionTypes from './PieceFilterConditionTypes';\r\nimport PieceFilterCondition from './PieceFilterCondition';\r\nimport PieceFilter from'./PieceFilter';\r\nimport  Types from './Types';\r\nimport Colors from './Colors';\r\nclass Board {\r\n\r\n    constructor(activePieces, graveyardPieces, turn, round, lastMovedPiece,isGameOver) {\r\n        this.activePieces = activePieces;\r\n        this.graveyardPieces = graveyardPieces;\r\n        this.turn = turn;\r\n        this.round = round;\r\n        this.lastMovedPiece = lastMovedPiece;\r\n        this.isGameOver = isGameOver;\r\n    }\r\n\r\n    getPieceByPosition(position) {\r\n        const position_FilterCondition = new PieceFilterCondition('position', position, PieceFilterConditionTypes.EQUAL);\r\n        const positionFilter = new PieceFilter([position_FilterCondition]);\r\n        const pieces = positionFilter.filter(this.activePieces);\r\n\r\n        if (pieces.length > 0) {\r\n            return pieces[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    getKing(color) {\r\n\r\n        const type_King_FilterCondition = new PieceFilterCondition('type', Types.KING, PieceFilterConditionTypes.EQUAL);\r\n        const color_FilterCondition = new PieceFilterCondition('color', color, PieceFilterConditionTypes.EQUAL);\r\n        const kingFilter = new PieceFilter([type_King_FilterCondition, color_FilterCondition]);\r\n\r\n        const pieces = kingFilter.filter(this.activePieces);\r\n        if (pieces.length > 0) {\r\n            return pieces[0]\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    getTurn() {\r\n        return this.turn;\r\n    }\r\n\r\n    switchTurn(){\r\n        if(this.turn === Colors.WHITE){\r\n            this.turn = Colors.BLACK;\r\n        }else{\r\n            this.turn = Colors.WHITE;\r\n        }\r\n    }\r\n\r\n\r\n    copy() {\r\n        const newActivePieces = this.activePieces.map(p => p.copy());\r\n        const newGraveyardPieces = this.graveyardPieces.map(p => p.copy());\r\n        const newTurn = this.turn;\r\n        const newRound = this.round;\r\n        const newLastMovedPiece = this.lastMovedPiece;\r\n        const isGameOver = this.isGameOver;\r\n\r\n        return new Board(\r\n            newActivePieces,\r\n            newGraveyardPieces,\r\n            newTurn,\r\n            newRound,\r\n            newLastMovedPiece,\r\n            isGameOver)\r\n    }\r\n\r\n    copyWithExchangedPieces(pieces){\r\n        const newBoard = this.copy();\r\n        const idFilterConditions = pieces.map(piece => {\r\n            return(new PieceFilterCondition('id', piece.id, PieceFilterConditionTypes.UNEQUAL));\r\n        });\r\n       \r\n        const idPieceFilter = new PieceFilter(idFilterConditions);\r\n        newBoard.activePieces = idPieceFilter.filter(newBoard.activePieces);\r\n        newBoard.activePieces.push(...pieces);\r\n        return newBoard;\r\n    }\r\n\r\n    removePiece(piece){\r\n        const idFilterCondition = new PieceFilterCondition('id',piece.id,PieceFilterConditionTypes.UNEQUAL);\r\n        const idFilter = new PieceFilter([idFilterCondition]);\r\n        this.activePieces = idFilter.filter(this.activePieces);\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default Board;","import Types from './Types';\r\nimport Colors from './Colors';\r\nclass Piece{\r\n    constructor(type,color,hasMoved, position, id,  lastPosition){\r\n        \r\n        this.color = color;\r\n        this.type = type;\r\n        this.position = position;\r\n        this.id = id;\r\n        this.hasMoved = hasMoved;\r\n        this.lastPosition = lastPosition;\r\n    }\r\n\r\n    move(target){\r\n        this.lastPosition = this.position;\r\n        this.position = target;\r\n        this.hasMoved = true;\r\n    }\r\n\r\n    isPawn(){\r\n        if(this.type === Types.PAWN){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    isBishop(){\r\n        if(this.type === Types.BISHOP){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    isKnight(){\r\n        if(this.type === Types.KNIGHT){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    isQueen(){\r\n        if(this.type === Types.QUEEN){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isKing(){\r\n        if(this.type === Types.KING){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    isRook(){\r\n        if(this.type === Types.ROOK){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    isWhite(){\r\n        return this.color === Colors.WHITE;\r\n\r\n    }\r\n    isBlack(){\r\n        return this.color === Colors.BLACK;\r\n    }\r\n\r\n    getPosition(){\r\n        return this.position;\r\n    }\r\n    setPosition(position){\r\n        this.position = position;\r\n    }\r\n\r\n    getID(){\r\n        return this.id;\r\n    }\r\n\r\n    copy(){\r\n        return new Piece(\r\n            this.type,\r\n            this.color,\r\n            this.hasMoved,\r\n            this.position,\r\n            this.id,\r\n            this.lastPosition)\r\n    }\r\n\r\n}\r\n\r\nexport default Piece;","import  Game from './Game';\r\nimport  Board from './Board';\r\nimport Types from './Types';\r\nimport Colors from './Colors';\r\nimport Piece from './Piece';\r\n\r\nfunction newGameFactory(){\r\n\r\n    const nextActivePieces = [];\r\n    let i = 0;\r\n    let idIndex = 0;\r\n\r\n    for (i; i < 8; i++) {\r\n        nextActivePieces.push(new Piece(Types.PAWN, Colors.WHITE, false, 8 + i, idIndex, null));\r\n\r\n        idIndex = idIndex + 1;\r\n    }\r\n\r\n    let a = 0\r\n    for (a; a < 2; a++) {\r\n        nextActivePieces.push(new Piece(Types.KNIGHT, Colors.WHITE, false, 1 + a * 5, idIndex, null));\r\n        idIndex = idIndex + 1\r\n    }\r\n\r\n    let b = 0\r\n    for (b; b < 2; b++) {\r\n        nextActivePieces.push(new Piece(Types.BISHOP, Colors.WHITE, false, 2 + b * 3, idIndex, null));\r\n        idIndex = idIndex + 1;\r\n    }\r\n    let c = 0;\r\n    for (c; c < 2; c++) {\r\n        nextActivePieces.push(new Piece(Types.ROOK, Colors.WHITE, false, 0 + c * 7, idIndex, null));\r\n        idIndex = idIndex + 1;\r\n    }\r\n\r\n    nextActivePieces.push(new Piece(Types.QUEEN, Colors.WHITE, false, 3, idIndex, null));\r\n    idIndex = idIndex + 1;\r\n    nextActivePieces.push(new Piece(Types.KING, Colors.WHITE, false, 4, idIndex, null));\r\n    idIndex = idIndex + 1;\r\n\r\n    let d = 0;\r\n    for (d; d < 8; d++) {\r\n        nextActivePieces.push(new Piece(Types.PAWN, Colors.BLACK, false, 48 + d, idIndex, null));\r\n        idIndex = idIndex + 1;\r\n    }\r\n\r\n    let e = 0\r\n    for (e; e < 2; e++) {\r\n        nextActivePieces.push(new Piece(Types.KNIGHT, Colors.BLACK, false, 57 + e * 5, idIndex, null));\r\n        idIndex = idIndex + 1\r\n    }\r\n\r\n    let f = 0\r\n    for (f; f < 2; f++) {\r\n        nextActivePieces.push(new Piece(Types.BISHOP, Colors.BLACK, false, 58 + f * 3, idIndex, null));\r\n        idIndex = idIndex + 1;\r\n    }\r\n    let g = 0;\r\n    for (g; g < 2; g++) {\r\n        nextActivePieces.push(new Piece(Types.ROOK, Colors.BLACK, false, 56 + g * 7, idIndex, null));\r\n        idIndex = idIndex + 1;\r\n    }\r\n\r\n    nextActivePieces.push(new Piece(Types.QUEEN, Colors.BLACK, false, 59, idIndex, null));\r\n    idIndex = idIndex + 1;\r\n    nextActivePieces.push(new Piece(Types.KING, Colors.BLACK, false, 60, idIndex, null));\r\n\r\n\r\n    const newBoard = new Board(nextActivePieces,[],Colors.WHITE,0,false,null);\r\n\r\n    return new Game(newBoard,[]);\r\n}   \r\n\r\nexport default newGameFactory;","import Game from './Game';\r\n\r\n\r\nfunction undoMove(Game){\r\n    if(Game.Board.round > 0){\r\n        const newGame = Game.copy();\r\n        newGame.Board = newGame.BoardHistory.pop();\r\n        return newGame\r\n    }\r\n}\r\n\r\nexport default undoMove","import './SplitscreenGame.scss';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Settings from './Settings/Settings';\r\nimport BoardComponent from '../Shared/Game/Board/BoardComponent';\r\nimport Graveyard from '../Shared/Game/Graveyard/Graveyard';\r\nimport Colors from '../../Model/GameLogic/Colors';\r\nimport makeMove from '../../Model/GameLogic/makeMove';\r\nimport StatusDisplay from '../Shared/Game/StatusDisplay/StatusDisplay';\r\nimport newGameFactory from '../../Model/GameLogic/newGameFactory';\r\nimport Board from '../Shared/Game/Board/BoardComponent';\r\nimport undoMove from  '../../Model/GameLogic/undoMove'\r\nfunction SplitscreenGame(props) {\r\n\r\n    const [activePieces, setActivePieces] = useState([]);\r\n    const [activePiecesHistory, setActivePiecesHistory] = useState([]);\r\n    const [firstBoard, setFirstBoard] = useState(Colors.WHITE);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [isGameInitialized, setIsGameInitialized] = useState(false);\r\n    const [graveyardPieces, setGraveyardPieces] = useState([]);\r\n    const [graveyardPiecesHistory, setGraveyardPiecesHistory] = useState([]);\r\n    const [round, setRound] = useState(0);\r\n    const [movedPieces, setMovedPieces] = useState([]);\r\n    const [turn, setTurn] = useState(Colors.WHITE);\r\n    const [lastMovedPiece, setLastMovedPiece] = useState(null);\r\n    const [showSettingsOverlay, setShowSettingsOverlay] = useState(true);\r\n    const [winner, setWinner] = useState(null);\r\n    const [Game, setGame] = useState({});\r\n\r\n    const screenWidth = window.innerWidth;\r\n\r\n    useEffect(() => {\r\n        console.log(Game.Board ? Game.Board.graveyardPieces :'')\r\n    }, [Game])\r\n\r\n\r\n    function initGame() {\r\n        const newGame = newGameFactory();\r\n        console.log(newGame)\r\n        setGame(newGame);\r\n        setIsGameInitialized(true);\r\n        setShowSettingsOverlay(false);\r\n    }\r\n\r\n    function move(newMove) {\r\n        const newGame = makeMove(Game, newMove);\r\n        setGame(newGame);\r\n    }\r\n\r\n    function undoMoveLocally() {\r\n        \r\n        const oldGame = undoMove(Game);\r\n        \r\n        if(oldGame) setGame(oldGame);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    function toggleFirstBoard() {\r\n        if (firstBoard === Colors.WHITE) {\r\n            setFirstBoard(Colors.BLACK)\r\n        } else {\r\n            setFirstBoard(Colors.WHITE)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {showSettingsOverlay\r\n                ?\r\n                <Settings\r\n                    screenWidth = {props.screenWidth}\r\n                    screenHeight = {props.screenHeigh}\r\n                    initGame={initGame}\r\n                    Board = {Game.Board}\r\n                    showSettingsOverlay={showSettingsOverlay}\r\n                    setShowSettingsOverlay={setShowSettingsOverlay}\r\n                    firstBoard={firstBoard}\r\n                    toggleFirstBoard={toggleFirstBoard}\r\n                />\r\n                :\r\n                ''}\r\n            <div className=\"status-display-container\">\r\n                <StatusDisplay\r\n                    Board={isGameInitialized ? Game.Board : {}}\r\n                    undoMove={undoMoveLocally}\r\n                    setShowSettingsOverlay={setShowSettingsOverlay}\r\n                />\r\n            </div>\r\n\r\n            {isGameInitialized\r\n                ?\r\n                props.screenWidth > 1000\r\n                    ?\r\n                    <>\r\n                        <div className=\"splitscreen-games-container\">\r\n                            {firstBoard === Colors.WHITE\r\n                                ?\r\n                                <>\r\n                                    <div className=\"splitscreen-game-container\">\r\n                                        <BoardComponent\r\n                                            playerColor={Colors.WHITE}\r\n                                            Board={Game.Board}\r\n                                            move={move}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"splitscreen-game-container\">\r\n                                        <BoardComponent\r\n                                            playerColor={Colors.BLACK}\r\n                                            Board={Game.Board}\r\n                                            move={move}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <div className=\"splitscreen-game-container\">\r\n                                        <BoardComponent\r\n                                            playerColor={Colors.BLACK}\r\n                                            Board={Game.Board}\r\n                                            move={move}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"splitscreen-game-container\">\r\n                                        <BoardComponent\r\n                                            playerColor={Colors.WHITE}\r\n                                            Board={Game.Board}\r\n                                            move={move}\r\n                                        />\r\n                                    </div>\r\n                                </>\r\n                            }\r\n\r\n                        </div>\r\n                        <div className=\"splitscreen-graveyards-container\">\r\n                            {firstBoard === Colors.WHITE\r\n                                ?\r\n                                <>\r\n                                    <Graveyard\r\n                                        playerColor={Colors.WHITE}\r\n                                        Board={Game.Board} />\r\n                                    <Graveyard\r\n                                        playerColor={Colors.BLACK}\r\n                                        Board={Game.Board}\r\n                                    />\r\n                                </>\r\n                                :\r\n                                <>\r\n                                    <Graveyard\r\n                                        playerColor={Colors.BLACK}\r\n                                        Board={Game.Board}\r\n                                    />\r\n                                    <Graveyard\r\n                                        playerColor={Colors.WHITE}\r\n                                        Board={Game.Board} />\r\n                                </>\r\n                            }\r\n                        </div>\r\n\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <div className=\"mobile-offline-graveyard-container-first\">\r\n                            <Graveyard\r\n                                Board={Game.Board}\r\n                                rotateColor={firstBoard === Colors.WHITE ? Colors.BLACK : Colors.WHITE}\r\n                                playerColor = {firstBoard === Colors.WHITE ? Colors.BLACK : Colors.WHITE}\r\n                            />\r\n                        </div> \r\n                        <div className=\"mobile-offline-game-container\">\r\n                            \r\n                                <Board\r\n                                    playerColor={firstBoard}\r\n                                    rotateColor={firstBoard === Colors.WHITE ? Colors.BLACK : Colors.WHITE}\r\n                                    firstBoard={firstBoard}\r\n                                    Board={Game.Board}\r\n                                    move={move}\r\n                                />\r\n                           \r\n                        </div>\r\n                        <div className=\"mobile-offline-graveyard-container-second\">\r\n                            <Graveyard\r\n                                Board={Game.Board}\r\n                                rotateColor={firstBoard === Colors.WHITE ? Colors.BLACK : Colors.WHITE}\r\n                                playerColor = {firstBoard}\r\n                            />\r\n                        </div> \r\n                    </>\r\n                        :\r\n                        ''\r\n                    }\r\n        </>\r\n\r\n    )\r\n\r\n            }\r\n            \r\nexport default SplitscreenGame;","import React from 'react';\r\nimport './UndoMoveComponent.scss';\r\n\r\nfunction UndoMoveComponent(props) {\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"undo-move-overlay\">\r\n            <div className=\"undo-move-container\">\r\n                <div> Player X wants to undo the move </div>\r\n                <div className=\"buttons-container\">\r\n                    <button onClick={props.acceptUndoMove}>accept</button>\r\n                    <button >reject </button>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default UndoMoveComponent;","\r\nimport Piece from './Piece';\r\n\r\nfunction pieceFactory(obj){\r\n    return new Piece(obj.type, obj.color, obj.hasMoved, obj.position, obj.id, obj.lastPosition);\r\n}\r\n\r\nexport default pieceFactory;","import Piece from './Piece';\r\nimport Board from './Board';\r\nimport pieceFactory from './pieceFactory';\r\nimport isGameOver from './isGameOver';\r\nfunction boardFactory(obj){\r\n\r\n    const activePieces = obj.activePieces.map(piece => pieceFactory(piece));\r\n    const graveyardPieces = obj.graveyardPieces.map(piece => pieceFactory(piece));\r\n    const turn = obj.turn;\r\n    const round = obj.round;\r\n    const lastMovedPiece = obj.lastMovedPiece ? pieceFactory(obj.lastMovedPiece) : null;\r\n    const isGameOver = obj.isGameOver; \r\n    return new Board(activePieces,graveyardPieces,turn,round,lastMovedPiece,isGameOver);\r\n}\r\nexport default boardFactory;","import React from 'react';\r\n\r\nimport './ReadyToShareComponent.scss';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { getThemeProps } from '../../../../node_modules/@material-ui/styles';\r\nfunction ReadyToShareComponent(props) {\r\n    const URL = window.location.href;\r\n\r\n\r\n    function copyToClipboard(){\r\n        navigator.clipboard.writeText(window.location.href);\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"ready-to-share-body\">\r\n            <div className=\"ready-to-share-description\">Your game has been created, share the link with the person you want to play with</div>\r\n            <button className=\"ready-to-share-container\" onClick={copyToClipboard}>\r\n            {props.screenWidth > 1000\r\n            ?\r\n            <>\r\n            <span>{URL}</span> \r\n            <span><FileCopyIcon /></span>\r\n            </>         \r\n            :\r\n            <>\r\n            <span>Click to copy the URL</span>\r\n            <span><FileCopyIcon /></span>\r\n            </>\r\n            }\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadyToShareComponent;","const backendEndpoint = \"http://127.0.0.1:4001\"\r\n\r\n// const backendEndpoint = \"https://splitscreen-chess.herokuapp.com\";\r\nexport default backendEndpoint;\r\n","import React from 'react';\r\nimport './OtherPlayerLeftComponent.scss'\r\n\r\n\r\nfunction OtherPlayerLeftComponent(props){\r\n\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"other-player-left-body\">\r\n            <span>The other player left the game</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OtherPlayerLeftComponent;","import React, { useState, useEffect } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport Colors from '../../Model/GameLogic/Colors';\r\nimport BoardComponent from '../Shared/Game/Board/BoardComponent';\r\nimport UndoMoveComponent from '../Shared/Game/UndoMoveComponent/UndoMoveComponent'\r\nimport boardFactory from '../../Model/GameLogic/boardFactory';\r\nimport './OnlineGame.scss';\r\nimport Graveyard from '../Shared/Game/Graveyard/Graveyard';\r\nimport StatusDisplay from '../Shared/Game/StatusDisplay/StatusDisplay';\r\nimport ReadyToShareComponent from './ReadyToShareComponent/ReadyToShareComponent';\r\nimport ENDPOINT from '../../backendEndpoint.js';\r\nimport OtherPlayerLeftComponent from './OtherPlayerLeftComponent/OtherPlayerLeftComponent';\r\n\r\n\r\nfunction OnlineGame(props) {\r\n\r\n    const gameRoomID = props.match.params.id;\r\n    const [socket, setSocket] = useState(null);\r\n    const [Board, setBoard] = useState({});\r\n\r\n    const [playerColor, setPlayerColor] = useState(null);\r\n    const [showUndoOverlay, setShowUndoOverlay] = useState(false);\r\n    const [playerId, setPlayerId] = useState(null);\r\n\r\n    const [isRoomExisting, setIsRoomExisting] = useState(null);\r\n    const [hasCreatedGame, setHasCreatedGame] = useState(props.hasCreatedGame);\r\n    const [isRoomFull, setIsRoomFull] = useState(false);\r\n    const [areTwoPlayersIngame, setAreTwoPlayersIngame] = useState(false);\r\n    const [isInGame, setIsInGame] = useState(false);\r\n    const [otherPlayerLeft, setOtherPlayerLeft] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        setSocket(null)\r\n        setAreTwoPlayersIngame(false);\r\n        setPlayerColor(null);\r\n        setShowUndoOverlay(false);\r\n        setPlayerId(null);\r\n        setIsInGame(false);\r\n        setOtherPlayerLeft(false);\r\n        setBoard({})\r\n    }, [props.match.params.id])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (!isInGame) setSocket(socketIOClient(ENDPOINT));\r\n\r\n        if (!playerColor) {\r\n            setBoard({})\r\n            setPlayerColor(null)\r\n        }\r\n\r\n\r\n\r\n    }, [gameRoomID, isInGame]);\r\n\r\n    useEffect(() => {\r\n        if (socket) {\r\n            if (!isInGame) {\r\n\r\n                socket.emit('joingame', gameRoomID, playerId);\r\n            }\r\n            socket.on('joinedGame', (color, playerId, hasCreatedGame) => {\r\n                setIsRoomExisting(true);\r\n                setPlayerColor(color);\r\n                setPlayerId(playerId);\r\n                setIsInGame(true);\r\n                setHasCreatedGame(hasCreatedGame);\r\n\r\n            });\r\n\r\n            socket.on('roomIsFull', () => {\r\n                setIsRoomFull(true);\r\n            })\r\n\r\n            socket.on('gameChanged', board_unparsed => {\r\n\r\n                const board = boardFactory(JSON.parse(JSON.stringify(board_unparsed)));\r\n                setShowUndoOverlay(false);\r\n                setBoard(board)\r\n\r\n            })\r\n\r\n            socket.on('gameReady', () => {\r\n                setAreTwoPlayersIngame(true)\r\n            })\r\n            socket.on('undoMoveRequest', () => {\r\n                setShowUndoOverlay(true);\r\n            });\r\n\r\n            socket.on('disconnect', () => {\r\n                console.log(\"disconnecting\")\r\n                setAreTwoPlayersIngame(false);\r\n                setIsInGame(false);\r\n            })\r\n\r\n            socket.on('otherPlayerLeft', () => {\r\n                setAreTwoPlayersIngame(false)\r\n                setOtherPlayerLeft(true);\r\n            })\r\n\r\n            return () => socket.disconnect();\r\n        }\r\n\r\n    }, [socket])\r\n\r\n    function move(nextMove) {\r\n        console.log(nextMove);\r\n        socket.emit('makeMove', gameRoomID, JSON.stringify(nextMove));\r\n    }\r\n\r\n    function undoMove() {\r\n        if (Board.round > 0) socket.emit('undoMoveRequest', gameRoomID);\r\n\r\n    }\r\n\r\n    function acceptUndoMove() {\r\n        socket.emit('acceptUndoMove', gameRoomID)\r\n    }\r\n\r\n    return (\r\n\r\n        <>{showUndoOverlay\r\n            ?\r\n            <UndoMoveComponent\r\n                acceptUndoMove={acceptUndoMove}\r\n                setShowUndoOverlay={setShowUndoOverlay}\r\n            /> :\r\n            ''}\r\n            <div className=\"status-display-container\">\r\n                <StatusDisplay\r\n                    Board={Board}\r\n                    undoMove={undoMove}\r\n\r\n                />\r\n            </div>\r\n\r\n            {isInGame\r\n                ?\r\n\r\n                areTwoPlayersIngame\r\n\r\n                    ?\r\n                    <>\r\n                        <div className=\"games-online-container\">\r\n\r\n                            {playerColor && Board.activePieces ?\r\n                                playerColor === Colors.WHITE\r\n                                    ?\r\n                                    <BoardComponent\r\n                                        screenWidth={props.screenWidth}\r\n                                        screenHeight={props.screenHeight}\r\n                                        playerColor={playerColor}\r\n                                        Board={Board}\r\n                                        move={move}\r\n\r\n                                    />\r\n                                    :\r\n                                    <BoardComponent\r\n                                        screenWidth={props.screenWidth}\r\n                                        screenHeight={props.screenHeight}\r\n                                        playerColor={playerColor}\r\n                                        Board={Board}\r\n                                        move={move}\r\n\r\n                                    />\r\n                                :\r\n                                ''\r\n                            }\r\n\r\n                        </div>\r\n                        {playerColor && Board.graveyardPieces\r\n                            ?\r\n                            <div className=\"graveyards-container\">\r\n                                <Graveyard\r\n                                    screenWidth={props.screenWidth}\r\n                                    screenHeight={props.screenHeight}\r\n                                    playerColor={playerColor}\r\n                                    Board={Board} />\r\n                            </div>\r\n                            :\r\n                            ''\r\n                        }\r\n                    </>\r\n\r\n                    :\r\n\r\n                    hasCreatedGame\r\n\r\n                        ?\r\n                        otherPlayerLeft\r\n\r\n                            ?\r\n\r\n                            <OtherPlayerLeftComponent />\r\n\r\n                            :\r\n\r\n                            <ReadyToShareComponent\r\n                                screenWidth={props.screenWidth}\r\n                                screenHeight={props.screenHeight}\r\n                            />\r\n\r\n                        :\r\n                        <OtherPlayerLeftComponent />\r\n                :\r\n\r\n                isRoomFull\r\n                ?\r\n                'Game is Full'\r\n\r\n                : \r\n                \"game doens't exist anymore\"\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\nexport default OnlineGame;","export default URL= \"/splitscreen-chess-frontend\";","import React from 'react';\r\nimport './NavigationMenu.scss'\r\nimport { Router, Route, Link, useHistory } from 'react-router-dom';\r\nimport URL from '../../../URL';\r\nfunction NavigationMenu(props) {\r\n\r\n    const navigationMenuClass = props.showNavigationMenu === 0\r\n        ?\r\n        \"navigation-menu-body navigation-menu-body-default\"\r\n        :\r\n        props.showNavigationMenu % 2 === 0\r\n            ?\r\n            \"navigation-menu-body navigation-menu-body-inactive\"\r\n            :\r\n            \"navigation-menu-body navigation-menu-body-active\"\r\n\r\n    return (\r\n\r\n        <div className={navigationMenuClass} onClick={e => e.stopPropagation()}>\r\n            <div className=\"navigation-menu-list\">\r\n                <ul>\r\n                    <li >\r\n                        <Link onClick = {props.toggleShowNavigationMenu} to={\"/\"}>\r\n                        <span>Home</span>\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link onClick= {props.toggleShowNavigationMenu} to={\"/Splitscreen\"}>\r\n                        <span>Splitscreen</span>\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <a onClick={e => {props.createNewGame();props.toggleShowNavigationMenu(e)} }>\r\n                        <span>New online game</span></a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>)\r\n\r\n}\r\n\r\nexport default NavigationMenu;","import React from 'react';\r\nimport './NavigationButton.scss';\r\n\r\nfunction NavigationButton(props){\r\n\r\n    const navigationButtonClass = props.showNavigationMenu === 0 \r\n    ?\r\n    \"navigation-button navigation-button-default\"\r\n    :\r\n        props.showNavigationMenu % 2 === 0\r\n        ?\r\n        \"navigation-button navigation-button-inactive\"\r\n        :\r\n        \"navigation-button navigation-button-active\"\r\n\r\n    return(\r\n        <button \r\n            className={navigationButtonClass}\r\n            onClick={e =>props.toggleShowNavigationMenu(e)}\r\n        >\r\n\r\n        <div id=\"top-bar\"></div>\r\n        <div id=\"mid-bar\"></div>\r\n        <div id=\"bottom-bar\"></div>\r\n            \r\n        </button>\r\n    )\r\n}\r\n\r\nexport default NavigationButton;","import React, {useEffect, useState} from 'react';\r\nimport './HomeComponent.scss';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction HomeComponent(props) {\r\n\r\n    const history = useHistory();\r\n \r\n\r\n\r\n    function handleSplitscrenNavigation(e) {\r\n        history.push(\"/splitscreen\")\r\n    }\r\n\r\n    function handleOnlineGameNavigation(e) {\r\n        props.newGameFactory();\r\n    }\r\n    \r\n   \r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"home-component-body\">\r\n            <div className=\"image-container\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"3 3 40 40\">\r\n                    <defs>\r\n                        <linearGradient id=\"splitGradient\" gradientTransform=\"rotate(15)\" >\r\n                            <stop offset=\"0%\" stopColor=\"#52658f\" />\r\n                            <stop offset=\"65%\" stopColor=\"#52658f\">\r\n                                <animate attributeName=\"stopColor\" values=\"#e8e8e8; #52658f\" dur=\"2s\" begin=\"0s\" />\r\n                                <animate attributeName=\"offset\" values=\"-1; 0.65\" dur=\"2s\" begin=\"0s\" />\r\n                            </stop>\r\n                            <stop offset=\"65%\" stopColor=\"#f7f5e6\" >\r\n                                <animate attributeName=\"stopColor\" values=\"#e8e8e8; #f7f5e6\" dur=\"2s\" begin=\"0s\" />\r\n                                <animate attributeName=\"offset\" values=\"2; 0.65\" dur=\"2s\" begin=\"0s\" />\r\n                            </stop>\r\n                            <stop offset=\"100%\" stopColor=\"#f7f5e6\" />\r\n                        </linearGradient>\r\n                        <linearGradient id=\"onlineGradient\"  >\r\n\r\n                            <stop offset=\"0%\" stopColor=\"#52658f\">\r\n                                <animate attributeName=\"stopColor\" values=\"#f7f5e6; #52658f\" dur=\"1.5s\" begin=\"0.5s\" />\r\n                                \r\n                            </stop>\r\n                            \r\n                            <stop offset=\"100%\" stopColor=\"#52658f\">\r\n                                \r\n                                \r\n                            </stop>\r\n\r\n                        </linearGradient>\r\n\r\n                    </defs>\r\n                    <g>\r\n                        <path className=\"animated-knight-init\" id=\"animated-knight\"\r\n                            d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 24.38,18 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\"\r\n                        />\r\n                    </g>\r\n                </svg>\r\n\r\n            </div>\r\n            <div className=\"nav-container\">\r\n                <button\r\n                    id=\"online-game-button\"\r\n                    onClick={handleOnlineGameNavigation}>\r\n                    Online game\r\n                </button>\r\n                <button onClick={handleSplitscrenNavigation}>\r\n                    splitscreen\r\n                </button>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nexport default HomeComponent;","\r\nimport './App.scss';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport { Router, Route, Link, useHistory } from 'react-router-dom';\r\n\r\nimport SplitscreenGame from './Components/SplitscreenGame/SplitscreenGame';\r\nimport OnlineGame from './Components/OnlineGame/OnlineGame';\r\nimport NavigationMenu from './Components/Shared/NavigationMenu/NavigationMenu';\r\nimport NavigationButton from './Components/Shared/NavigationButton/NavigationButton';\r\nimport HomeComponent from './Components/Home/HomeComponent';\r\nimport newGameEndpoint from './backendEndpoint';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const history = useHistory();\r\n    const [showNavigationMenu, setShowNavigationMenu] = useState(0);\r\n    const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n    const [screenHeight, setScreenHeight] = useState(window.innerHeight);\r\n\r\n\r\n\r\n    function createNewGame() {\r\n        fetch(`${newGameEndpoint}/newgame`, {\r\n            method: 'GET'\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n\r\n                history.push(`/online/${data.gameID}`)\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    function toggleShowNavigationMenu(e) {\r\n        e.stopPropagation();\r\n        showNavigationMenu === 0\r\n            ? setShowNavigationMenu(1)\r\n            :\r\n            showNavigationMenu === 1\r\n                ?\r\n                setShowNavigationMenu(2)\r\n                :\r\n                setShowNavigationMenu(1);\r\n\r\n    }\r\n    function clickDisplay(e) {\r\n        if (showNavigationMenu === 1) toggleShowNavigationMenu(e);\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        setScreenWidth(window.innerWidth);\r\n        setScreenHeight(window.innerHeight);\r\n        const handleScreenResize = () => {setScreenWidth(window.innerWidth); setScreenHeight(window.innerHeight)};\r\n        window.addEventListener('resize', handleScreenResize);\r\n        return () => window.removeEventListener('resize', handleScreenResize)\r\n\r\n    }, [])\r\n\r\n    \r\n    return (\r\n        <header className=\"App\" onClick={clickDisplay}>\r\n            <NavigationButton\r\n                screenWidth={screenWidth}\r\n                screenHeight={screenHeight}\r\n                showNavigationMenu={showNavigationMenu}\r\n                toggleShowNavigationMenu={toggleShowNavigationMenu}\r\n            />\r\n            <NavigationMenu\r\n                screenWidth={screenWidth}\r\n                screenHeight={screenHeight}\r\n                showNavigationMenu={showNavigationMenu}\r\n                createNewGame={createNewGame}\r\n                toggleShowNavigationMenu={toggleShowNavigationMenu}\r\n            />\r\n\r\n            {/* <Link to=\"/\"> home</Link> */}\r\n            <Route exact path={ \"/\"} render={() => (\r\n                <HomeComponent createNewGame={createNewGame}/>\r\n            )}>\r\n                {/* <Link to=\"/Splitscreen\" >Splitscreen game </Link>\r\n                <button onClick={createNewGame}> create new game </button> */}\r\n            </Route>\r\n            <Route path={\"/Splitscreen\"} render={() => (\r\n                <SplitscreenGame\r\n                    screenWidth = {screenWidth}\r\n                    screenHeight = {screenHeight}\r\n                />)}>\r\n\r\n            </Route>\r\n            <Route path={\"/online/:id\"} render={(props) => (\r\n                < OnlineGame key={window.location.pathname} {...props}\r\n                    screenWidth = {screenWidth}\r\n                    screenHeight = {screenHeight}\r\n                />)} >\r\n\r\n            </Route>\r\n\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { HashRouter as Router } from \"react-router-dom\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\nconsole.log(process.env.PUBLIC_URL)\n\nReactDOM.render(\n    <Router basename={process.env.PUBLIC_URL}>\n            <App />\n    </Router>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}